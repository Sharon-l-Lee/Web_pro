
절차 지향
	위에서부터 순차적으로 실행하는 것
	후에 요구사항이 변경되거나, 기존의 로직을 재사용할 때 비효율적인 부분이 있다
↓
메소드 등장
	로직만 만들어놓고 데이터에 따라 메소드가 알아서 결과값을 반환하게 하는 방식
↓
객체 지향
	동일한 성질의 데이터와 메소드를 한 곳에 모아두고 필요한 곳에서 언제든지 사용할 수 있게 만들어 둔 것.



메소드란?
	작업을 수행하기 위한 명령문의 집합
	어떤 값을 입력받아서 처리하고 그 결과를 돌려준다( 입력받는 값이 없을 수도 있고, 결과를 돌려주지 않을 수도 있다.)
	작성 지침 : 반복적으로 수행되는 여러 문장을 메소드로 작성한다.

	접근제한자 [static] return type 메소드 이름 ([매개변수1, 매개변수2...]) {
	처리할 프로세스
	[return 리턴값;]	
	}

메소드의 한계
	메소드만 가지고 많은 양의 로직을 처리하기 어렵다
	한 문서 내에 메소드 수가 많아질 경우 유지 보수에 어려운 일이 발생함


객체의 개념과 클래스의 이해
	객체 : 같은 종류의 데이터와 메소드가 함께 있는 구성체.
		Ex)  자동차( 객체 ) 
			색상, 배기량, 브랜드, 속도(데이터), drive, park, racing ( 메소드 ) ...
			드라이브나 주차를 하면서 속도를 바꾸기도 하고, 색상으로 다른 차와 구분하기도 함

	객체 모델링 : 객체와 클래스 : 클래스는 객체의 설계도면. 클래스를 보고 객체를 생성한다
		Ex) drive, park, race를 하도록 설계된 설계도를 보고 자동차 객체를 생성

객체 자료형과 변수와의 관계
	기초 데이터 변수는 메모리에 무엇이든 담을 수 있는 주머니를 만들어놓고 주머니에 값을 직접 넣는다.
	반면, 객체 데이터 변수는 주머니에 값 대신 주소를 넣는다.
