접근제한자의 종류
	[접근제한자] [static/final] 데이터형 변수명;
	
	접근제한자 : 클래스의 데이터나 메소드의 접근을 제한하는 것.
		public : 클래스, 필드, 생성자, 메소드 대상.
			접근을 제한하지 않음, 다른 클래스에서 사용가능
		protected : 필드, 생성자, 메소드 대상.
			해당 클래스와 동일한 패키지거나 상속받은 클래스의 경우에 사용가능
		default : 클래스, 필드, 생성자, 메소드 대상. 
			접근제어자를 따로 명시하지 않은 디폴트 접근제어자. 같은 패키지 내의 클래스들은 public 권한을 가지고 접근 가능
		private: 필드, 생성자, 메소드 대상.
			해당 클래스만 사용 가능, 외부 객체에서는 접근할 수 없음

static 
	
	static : 클래스 변수 (=static 변수, 정적변수, 공용변수), 클래스에 고정된 멤버.
		객체를 생성하지 않고 사용할 수 있다.
		클래스로부터 생성된 객체들의 수와 상관없이 하나만 생성된다.
		한 클래스로부터 생성된 객체들은 클래스 변수를 공유함.
		클래스 변수를 통해 객체들 간의 통신에 사용하거나 공통 속성을 나타낼 수 잆다.
		static 변수는 클래스 이름을 통해 접근한다.
	
	정적 멤버 선언:필드와 메소드를 선언할 때 static을 붙여준다.
	//정적 필드
	static 타입 필드 [=초기값];

	//정적 메소드
	static 리턴 타입 메소드(매개변수) {}...


	정적 멤버 선언의 구분
		인스턴스 필드 : 객체마다 가지고 있어야하는 데이터
		정적 필드 : 공용적인 데이터
		
		인스턴스 메소드: 인스턴스 필드를 사용해 선언
		정적 메소드 : 정적 필드를 사용

	주의할 점:  객체가 없어도 실행할 수 있기 때문에 인스턴스 필드와 메소드를 사용할 수 없다.
		(정적 메소드에서 인스턴스 멤버를 사용할 경우 객체를 생성한 후 참조 변수로 접근한다.)
		객체 자신을 참조하는 this 키워드를 사용할 수 없다.

