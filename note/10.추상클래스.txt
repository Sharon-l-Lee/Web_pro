추상클래스의 이해
	: 추상적으로 선언할테니, 객체를 사용할 사용자가 꼭 재정의(오버라이딩) 해서 쓰세요.

	강제로 자식 클래스가 부모 클래스의 메소드를 재정의(오버라이드) 하도록 만들어진 클래스.

추상클래스의 문법
	1. abstract (추상클래스 및 추상 메소드를 선언하는 예약어)이용
		public abstract class ClassName{ ... }
	2. 추상클래스는 하나 이상의 추상 메소드가 포함된다. 추상 메소드는 정의만 하고 구현하지는 않는다.
	3. 추상 메소드에는 메소드의 선언부만 있고 실행부 (구현한 것, body)는 없다.
		abstract 리턴타입 methodName([매개변수]) 
	4. 선언한 해둔 메소드를 상속받는 클래스에서 구현해서 사용한다.
	5. 클래스의 프레임만 구성한다. 직접 객체를 생성하지는 못한다. (abstract는 인스턴스화를 금지하는 키워드

추상클래스가 필요한 이유
	어떤 메소드를 정의만 해놓고 필요한 곳에서 꼭 재정의를 해야할 필요성을 느낄 때 추상메소드를 사용한다

*인터페이스 vs 추상메소드
인터페이스 - 상수, 추상메소드만 들어감

추상클래스 - 상수, 변수, 생성자, 추상메소드, 일반메소드

추상클래스와는 반대인 개념 : final(제한자)
	클래스 앞에 붙일 경우 : 상속 금지
	public final class Test {

	}
	멤버 메소드 앞에 붙일 경우 : 오버라이딩 금지
	public final void print(){
	
	}
	멤버변수 앞에 붙일 경우 : 상수화(변경금지).
	public final int PORT_NUMBER = 80;
