인터페이스란?
	1. 작업명세서(작업 지시서) : 실제로 구현된 것이 전혀 없는 기본 설계도.
				객체를 생성할 수 없고, 추상메서드와 상수만 가진다.
				미리 정해진 규칙에 맞게 구현하도록 표준을 제시해 클래스 작성에 도움을 준다.
	2. 다형성을 가능하게 한다. (하나의 객체를 다양하게 많은 타입으로 만들 수 있다.)
	3. 객체를 부속품화 한다. 다양한 객체를 부속품처럼 개발자 마음대로 변경할 수 있다.
	4. 패턴과 프레임워크

인터페이스의 문법
	1.클래스 대신 인터페이스 예약어를 사용.(클래스와 유사)
	2. 실제로 구현된 기능 없이 추상메소드와 상수만 존재한다. 
	public interface 인터페이스 이름 {
		public static final 타입 상수이름(대문자) = 값;
		public abstract 메서드 이름(매개변수 목록); 
	
	}
	
		모든 멤버 변수는 public static final이며, static final은 생략가능하다
		모든 메서드는 public abstract이며, abstract를 생략할 수 있다.
	3.상수나 메소드를 만들 때 접근제한자 private는 쓸 수 없다.
	4.인터페이스는 객체를 생성할 수 없고 변수 타입으로만 사용된다.
	5. 구현은 Implement 되는 클래스에서 한다.

다형성이란
	객체가 다양하게 변할 수 있다는 것.
	하나의 클래스나 함수가 다양하게 동작한다.

	ex) 오버로딩(재정의) : 컴파일러 입장에서는 기존에 없는 새로운 메소드를 정의하는 것. 같은 클래스에서 동일한 메소드가 매개변수를 다르게 해서 여러 개 존재하는 것.
	오버라이딩 (다중정의): 상속받은 메소드의 내용을 변경하는 것. 같은 이름을 가진 메소드를 다른 클래스에서 재정의한다.

	*오버라이딩 조건 : 1. 선언부가 같아야한다. (이름, 매개변수, 리턴타입)
			2. 접근제어자를 좁은 범위로 변경할 수 없다. 

인터페이스의 장점
	1. 개발시간을 단축시킬 수 있다.
	2. 표준화가 가능하다
	3. 서로 관계없는 클래스에게 관계를 맺어줄 수 있다.
	4. 독립적인 프로그래밍이 가능하다

인터페이스 vs 추상클래스

공통점 : 추상메소드를 가지고 있어 하위 클래스에서 구현해야한다.
	변수 타입이 목적.
	객체 생성은 익명 클래스를 사용

차이점 :  추상메소드는 상속, 인터페이스는 구현을 통해 사용한다
	추상클래스는 일반클래스와 동일하게 변수, 메소드 등의 기능을 사용할 수 있지만,
	인터페이스는 상수와 추상메소드가 존재하고만 있다.
	추상클래스는 단일 상속만 지원하고, 인터페이스는 다중 구현이 가능하다.

