서블릿은 JSP 표준이 나오기 전에 만들어진 표준으로 자바에서 웹 애플리케이션을 개발할 수 있도록 하기 위해 만들어 졌으며 자바 클래스를 웹에서 실행 할 수 있도록 한 웹 프로그램이다

서블릿 요청 처리
	요청 방식에 따라 doGet이나 doPost메소드를 재정의해서 처리한다.
	service 메소드를 재정의해서 사용할 수도 있는데 이 메소드는 get 방식이나 post 방식 상관없이 호출되며 이 메소드가 호출되면 doGet이나 doPost 메소드는 호출되지 않는다
	서블릿에서 요청을 처리하기 위해 오버라이딩 한 메소드는 request 객체를 이용해서 웹 브라우저의 요청 정보를 읽어 오거나 response를 이용해서 응답을 전송할 수 있다
	응답을 전송할 때는 response 객체의 setContentType()메서드를 이용해서 타입과 인코딩 방식을 지정해 주어야 한글이 깨지지 않는다.
	웹 브라우저에 데이터를 전송하려면 getWriter()를 호출해서 문자열 데이터를 출력할 수 있는 PrintWriter를 가져오고 print()나 println()을 이용해서 전송한다

WAS로 요청하는 방식
	Get방식 – URL값으로 정보가 전송되어 보안에 약함
		주소와 매개변수를 붙여서 주소 표시줄에 입력하는 방법(?로 구분)
		a 태그를 이용해서 페이지를 요청하는 경우
		form태그에서 명시적으로 GET방식으로 요청하는 경우(method=”get”)
		매개변수의 데이터는 255자 이내이며 보안성이 없음
	Post방식 – header를 이용해 정보가 전송되어 보안에 강함
		form태그에서 명시적으로 POST 방식으로 요청(method=”post”)
		데이터의 크기에 제한이 없으며 URL에 표시되지 않으므로 보안성이 우수
		한글 파라미터 전달시 request.setCharacterEncoding(“utf-8”)추가

Context Path
	WAS(Web Application Server)에서 웹어플리케이션을 구분하기 위한 path. 해당 웹 어플리케이션이 이름. 
	이클립스에서 프로젝트를 생성하면, 자동으로 server.xml에 추가된다.  
	프로젝트를 삭제하고 다시 같은 이름의 프로젝트를 생성할 수 없다.

Servlet 작동순서 
	클라이언트에서 servlet 요청이 들어오면 서버에서 servlet 컨테이너를 만들고 요청이 있을 때마다 스레드가 생성된다
	웹 브라우저 → 웹서버 → 웹 어플리케이션 서버 → Servlet 컨테이너 servlet 객체 생성, 스레드 생성

Servlet 생명주기
	실행 시기 : Servlet 객체 생성(최초 한 번)
	최초요청, 컨테이너 시작 : init() 호출(최초 한번)
	모든 요청과 응답 : service(), doGet(), doPost() 호출(요청시 매 번, doGet이나 doPost가 없으면 service를 실행. 통상적으로 doGet과 doPost를 둔다)
	컨테이너 종료/어플리케이션종료 : destroy() 호출(마지막한번 자원해제 : Servlet수정, 서버재가동 등)

	*Servlet의 사용도가 높은 이유는 응답속도가 빠르기 때문이다. Servlet은 최초 요청 시 객체가 만들어져 메모리에 로딩되고, 이후 요청 시에는 기존의 객체를 재활용하게 되어 동작 속도가 빠르다.

Servlet 선처리, 후처리
	Servlet의 생명주기 중 init()과 destroy()메소드와 관련해 선처리(init()전)와 후처리(destroy()후) 작업이 가능
		init()호출 전 선처리 : @PostConstruct 후 메소드
		destroy()호출 후 후처리 : @PreDestroy 후 메소드

Servlet Parameter
	Form태그의 submit 버튼을 클릭하여 데이터를 서버로 전송하면, 해당파일(Servlet)에서는 HttpServletRequest객체를 이용하여 Parameter값을 얻을 수 있다.
		request.getParameter("파라미터이름");
		request.getParameterValues("파라미터배열이름");
		request.getParameterNames() ; 파라미터 이름들이 배열로

한글 처리
	response객체 : response.setContentType("text/html;charset=utf-8");
	request객체(Post방식) : request.setCharacterEncoding("utf-8");

	