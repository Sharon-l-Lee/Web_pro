JSTL(JSP Standard Tag Library)란?

	JSP는 HTML태그와 함께 사용하기 때문에 가독성이 떨어진다. 이러한 단점을 보완하기 위해 만들어진 태그 라이브러리다.

JSTL로 할 수 있는 일
	간단한 프로그램 로직의 구사(자바의 변수 선언, if문, for문 등에 해당하는 로직)
	다른 JSP 페이지 호출(<c:redirect>, <c:import>)
	날짜, 시간, 숫자의 포맷
	JSP 페이지 하나를 가지고 여러 언어의 웹 페이지 생성

JSTL라이브러리
	1.Core 
		Core 라이브러리는 기본적인 라이브러리로 출력, 제어문, 반복문 같은 기능이 포함된다. 
		JSP페이지에서 위의 prefix를 사용하기 위해서는 taglib 지시자를 이용해서 라이브러리의 URI 식별자와 접두어를 연결해야 한다. Taglib 지시자는 다른 지시자와 마찬가지로 <%@로 시작해서 %>로 끝난다. 아래와 같이 두개의 속성값을 써야 한다. 
		<%@ taglib prefix=“c” uri=”http://java.sun.com/jsp/jstl/core” %>
			     접두어       라이브러리를 식별하는 라이브러리


	출력 태그 <c:out>
		<c:out value=“출력값” default=“기본값” escapeXml=“true or false”> false를 주면 특수기호를 해석
	변수 설정 태그 <c:set>
		<c:set var=“변수명” value=“설정값” target=“객체” property=“값” scope=“범위”>어떤 객체의 속성값을 변수로 지정
	변수를 제거하는 태그 <c:remove>
		<c:remove var=“변수명” scope=“범위”>
	예외 처리 태그 <c:catch>
		<c:catch var=“변수명”>
	제어문(if)태그 <c:if>
		<c:if test=“조건” var=“조건 처리 변수명” scope=“범위”>
	제어문 태그 : <c:choose>
		<c:choose>
			<c:when test=“조건1”> 처리 내용 </c:when>
			<c:when test=“조건2”> 처리 내용 </c:when>
			<c:when test=“조건3”> 처리 내용 </c:when>
			<c:otherwise> 처리 내용 </c:otherwise>
		</c:choose>
	반복문(for) 태그 : <c:forEach>
		<c:forEach items=“객체명” begin=“시작 인덱스” end=“끝 인덱스” step=“증감식” var=“변수명” varStatus=“상태변수”>
		<c:forTokens var=“변수명” item=전체스트링 delims=구분자>
	페이지 이동태그 <c:redirect url=”url”>
		<c:redirect url=“url”>


	2.fmt 
		국제화/형식화 액션. 국제화/형식화 기능을 제공해 주는 JSTL 라이브러리. 국제화는 다국어 내용을 처리하고 형식화는 날짜나 숫자 형식 등을 처리한다.
		<%@taglib prefix=”fmt” uri=”http://java.sum.com/jsp/jstl/fmt” %>를 먼저 선언해주고 사용한다.

	인코딩 관련 태그:  <fmt:requestEncoding> == <% request.setCharacterEncoding(“utf-8”);%>
		Request 객체로 부터 전달 받은값들을 인코딩할 때 사용한다. 한글 값이 넘어올 경우 <fmt:requestEncoding value="utf-8"/>코드로 Request 객체로 받는 값을 한글에 맞게 인코딩해 준다

	국제화 관련 태그 <fmt:setLocale> <fmt:timeZone> <fmt:setTimeZone> <fmt:bundle> <fmt:setBundle><fmt:message> <fmt:param>

	형식화 관련 태그 : <fmt:formatNumber> ,<fmt:formatDate>


		1. <fmt:formatNumber> : 숫자형식의 패턴을 설정할 때 사용한다
		<fmt:formatNumber value=”값” type=”타입” pattern=”패턴” currencyCode=”값” currencySymbol=”값” groupingUsed=”true or false” maxIntegerDigits=”값” minIntegerDigits=”값” maxFractionDigits=”값” minFractionDigits=”값” var=”변수명” scope=”범위”>
		
		value :  패턴을 적용 시킬 원래의 값을 입력
		type : 숫자의 타입을 의미. 숫자, 통화, 퍼센트중 원하는 타입으로 설정 가능
		pattern : 지정한값을 어떤 패턴으로 변화 시킬지를 정 할수 있다
		currencyCode : 통화코드를 의미하며, 숫자타입이 통화일 경우만 유효하다
		currencySymbol : 숫자타입이 통화일 때 유효하며, 통화기호를 지정할 수 있다
		groupingUsed: 그룹기호의 포함 여부를 나타낸다
		maxIntegerDigits : 최대정수 길이 
		minIntegerDigits : 최소 정수 길이
		maxFractionDigits :  최대 소수점 자릿수  
		minFractionDigits :  최소 소수점 자릿수를 의미

	
		2.<fmt:formatDate> : 날짜형식의 패턴을 설정할 때 사용한다
		<fmt:formatDate value=”값” type=”타입” dateStyle=”값” timeStyle=”값” pattern=”패턴” timeZone=”값” var=”변수명” scope=”범위”>

		value 속성에는 날짜 또는 시간을 입력  
		type 속성으로 날짜인지 시간인지 또는 날짜와 시간 둘다 포함한 타입인지를 지정
		 dateStyle은 날짜의 스타일을 지정. type 속성이 date 또는 both일 때만 적용  
		timeStyle은 시간의 스타일을 지정. type 속성이 time 또는 both일 때만 적용 
		timeZone속성은 날짜와 시간이 표시될 시간대를 지정



