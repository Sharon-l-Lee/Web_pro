입출력이란? 
	데이터를 읽고(input) 쓰는(output)것.
	input : 파일 데이터를 읽는다. 키보드의 데이터를 읽는다. 네트워크 상의 데이터를 읽는다.
	output:  파일에 데이터를 쓴다. 모니터에 데이터를 쓴다. 네트워크상에 데이터를 쓴다.
	

Java의 입출력 API
	InputStream : 1byte단위 입력 API. 이미지, 동영상 등의 데이터에 주로 사용
	OutputStream : 1byte단위 출력 API. 이미지, 동영상 등의 데이터에 주로 사용
	Reader : 2byte단위 입력 API. 문자열에 주로 사용
	Writer : 2byte단위 출력 API. 문자열에 주로 사용
	DataInputStream / DataOutputStream : 조금속도를 빨리 하기 위한 Data 스트림
	BufferedReader / BufferedWriter
	PrintWriter

*cf) 스트림이란?
	데이터를 입출력하는데 사용되는 연결통로. 단방향통신으로 하나의 스트림으로 입출력을 동시에 수행할 수는 없다. 
	입출력을 동시에 수행하려면 2개의 스트림이 필요하다.

	1)파일로부터 데이터를 읽는 3단계 : 파일(연결통로)을 연다 -> 파일의 데이터를 읽는다(필요한 만큼 반복) -> 파일을 닫는다
	2)파일에 데이터를 쓰는 3단계 : 파일(연결통로)을 연다 -> 파일에 데이터를 쓴다 -> 파일을 닫는다

InputStream
	1)InputStream(추상) 클래스를 상속받은 여러 가지 API 하위 클래스 중 하나를 이용해서 객체를 만든다. 혹은 다른 클래스의 메소드에서 리턴되는 타입 객체를 얻는다.
	2)read(), read(byte[]) 두 개의 메소드를 이용하여 데이터를 읽는다.
		①read() 1byte씩 읽는다. 속도가 느리다
		②read(byte[]) byte[]만큼씩 읽는다. 속도가 빠르다.
	3)예외 처리와 close() 를 실행
		①IOException 예외 처리를 반드시 한다.
		②작업 마지막을 반드시 close()로 닫아 외부 연결을 끝낸다.

OutputStream 사용법
	1)OutputStream(추상) 클래스를 상속받은 여러가지 API 하위 클래스들 중의 하나를 이용해서 객체를 만든다. 혹은 다른 클래스의 메소드에서 리턴되는 타입 객체를 얻는다.
	2)write()메소드를 이용해서 데이터를 읽는다
	3)write(int), write(byte[]), write(byte[], int, int) 세개의 메소드를 사용할 수 있다.
	4)예외 처리와 close() 를 실행
		①IOException 예외 처리를 반드시 한다.
		②작업 마지막을 반드시 close()로 닫아 외부 연결을 끝낸다.


파일 읽고 쓰기
	읽고, 쓰기를 동시에 – 파일 복사
		1)파일을 읽고, 다른 파일에 쓰고, 파일을 복사하는 것과 같다.
		2)작업순서 : InputStream, OutputStream 준비 > is로 읽어들인 데이터를 os으로 씀 > 외부연결 close()함. 
		3)read() : read(), read(byte[]) 등 다양한 메소드 이용 가능
		4)write() : write(byte), write(byte[]), (write(byte[], int, int) 등 다양한 메소드 이용 가능

텍스트 읽고 쓰기
	Reader ; 2byte 단위의 읽기
	BufferedReader, BufferedWriter 클래스 :속도를 빨리 하기 위한 보조 스트림
	Writer ; 2byte 단위의 쓰기



