
Join의 필요성
	각기 다른 테이블에 있는 정보를 가져오고 싶을 때 Join을 하지 않으면 sql문을 여러개 써야하는 번거로움이 있다.

Cross Join
	특별한 키워드 없이 FROM절에 두 개 이상의 테이블을 기술하는 것.
	SELECT * FROM EMP, DEPT;
	Cross Join을 할 때 아무런 조건을 제시하지 않으면 결과가 아무런 의미를 갖지 못한다
	조건에 따라 Join의 종류가 결정되며, 결과가 유의미해진다.

		1)Equi Join : 동일한 컬럼을 기준으로 join
		2)Non-Equi Join : 동일한 컬럼없이 다른 조건을 사용하여 join
		3)Outer Join : 조인 조건에 만족하지 않는 행도 나타나는 join
		4)Self Join : 한 테이블 내에서 join

1)Equi Join
	
	두 테이블에서 공통적으로 존재하는 컬럼의 값이 일치되는 행을 연결해 결과를 생성하는 join 방법
	일치되는 공통 컬럼을 사용해 join하며 컬럼의 이름이 같게 되면 혼동이 오기 때문에 컬럼 이름 앞에 테이블 이름을 기술
	두 테이블에 동일한 이름의 컬럼을 사용하면 어느 테이블 소속인지 불분명하기에 오류 메시지가 출력된다 
		>해결방법:동일한 이름의 컬럼은 반드시 컬럼명앞에 테이블명을 명시적으로 기술
	ex) 사원 정보를 출력할 때 각 사원들이 소속된 부서의 상세 정보를 출력하기 위해서 두 개의 테이블을 join한 예
	SELECT * FROM emp, dept WHERE emp.deptno=dept.deptno;

2)Non-Equi Join

	Non-Equi Join은 join 조건이 특정 범위 내에 있는지 알아내기 위해 사용한다.
	WHERE 절에 join조건을 = 연산자 이외의 비교 연산자를 사용한다.
	ex)사원의 급여가 몇 등급인지 살펴보기 위한 예제
	SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, GRADE||'등급', NVL(COMM,0), DEPTNO FROM EMP E, SALGRADE S WHERE SAL BETWEEN LOSAL AND HISAL;


3)Self Join
	자기의 테이블과 join하는 것. 하나의 테이블 내에서 join해야 정보를 얻을 수 있는 경우에 사용
	Equi join과 비슷하나, Self join은 테이블 하나에 join이 일어난다
	같은 테이블에 대해 두 개의 별칭(Alias)를 작성하는 것은 동일하다

4)Outer Join
	어느 join조건에 만족하지 못했더라도, 해당 row를 나타내고 싶을 때 사용한다.
	NULL값이라 배제된 행을 결과에 포함시킬 수 있다.
	(+)기호를 정보가 부족한 칼럼의 이름 뒤에 붙인다.


	
	